import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class BikeRentalService {
    private Connection conn;

    public BikeRentalService() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/bike_rental", "root", "password");
        } catch (ClassNotFoundException | SQLException e) {
            System.out.println("Error connecting to database: " + e.getMessage());
        }
    }

    public void createBike(String type, String size) {
        String query = "INSERT INTO bikes (type, size, available) VALUES (?, ?, true)";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, type);
            pstmt.setString(2, size);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println("Error creating bike: " + e.getMessage());
        }
    }

    public void rentBike(int bikeId, int customerId) {
        String query = "UPDATE bikes SET available = false, customer_id = ? WHERE bike_id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, customerId);
            pstmt.setInt(2, bikeId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println("Error renting bike: " + e.getMessage());
        }
    }

    public void returnBike(int bikeId) {
        String query = "UPDATE bikes SET available = true, customer_id = null WHERE bike_id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, bikeId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println("Error returning bike: " + e.getMessage());
        }
    }

    public void listAvailableBikes() {
        String query = "SELECT * FROM bikes WHERE available = true";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            ResultSet result = pstmt.executeQuery();
            while (result.next()) {
                System.out.println("Bike ID: " + result.getInt("bike_id") + ", Type: " + result.getString("type") + ", Size: " + result.getString("size"));
            }
        } catch (SQLException e) {
            System.out.println("Error listing available bikes: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        BikeRentalService service = new BikeRentalService();
        service.createBike("Road Bike", "Large");
        service.createBike("Electric Bike", "Medium");
        service.listAvailableBikes();
        service.rentBike(1, 1);
        service.listAvailableBikes();
        service.returnBike(1);
        service.listAvailableBikes();
    }
}
